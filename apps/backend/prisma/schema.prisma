generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  solves    Solve[]
  matches   Match[]
  rooms     Room[]   @relation("RoomMembers")
  ownedRooms Room[]  @relation("RoomOwner")
}

model Solve {
  id        String   @id @default(cuid())
  time      Float    // Time in seconds
  penalty   String?  // "+2", "DNF", or null
  scramble  String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  matchId   String?
  match     Match?   @relation(fields: [matchId], references: [id])
  createdAt DateTime @default(now())
}

model Room {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique // 6-digit room code
  ownerId     String
  owner       User     @relation("RoomOwner", fields: [ownerId], references: [id])
  members     User[]   @relation("RoomMembers")
  matches     Match[]
  isActive    Boolean  @default(true)
  maxMembers  Int      @default(10)
  createdAt   DateTime @default(now())
}

model Match {
  id        String     @id @default(cuid())
  roomId    String
  room      Room       @relation(fields: [roomId], references: [id])
  scramble  String
  status    MatchStatus @default(WAITING)
  solves    Solve[]
  startedAt DateTime?
  endedAt   DateTime?
  createdAt DateTime   @default(now())
  participants User[]
}

enum MatchStatus {
  WAITING
  PREPARING
  STARTED
  FINISHED
}
